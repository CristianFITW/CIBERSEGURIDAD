//使用面向对象封装一个数据库类
//大量的代码模块需要数据库的连接、查询、断开连接方法，如果每个模块都自定义数据库连接的话，就不方便，易出错
const mysql = require("mysql");
class Db {
    constructor({ host = 'localhost', user = 'root', password = '', database = '' } = {}) {
        this.dbconfig = {
            host,
            user,
            password,
            database
        }
        this.connection = null;
    }
    static to(promise){
        return promise.then((data)=>{
            return [null,data];
        }).catch((err)=>{
            return [err];
        })
    }
    initConnect() {
        let conn = mysql.createConnection(this.dbconfig);
        this.connection = conn;
        return new Promise((resolve,reject)=>{
            conn.connect((err)=>{
                if(err){
                    reject(err.stack);
                } else {
                    resolve(conn);
                }
            })
        })
    }
    async query(sql,arr=[]) {
        let [err,conn] = await Db.to(this.initConnect());
        if(err) throw err;
        return new Promise((resolve,reject)=>{
            conn.query(sql,arr,(err,results)=>{
                if(!err){
                resolve( results );
                }else{
                reject(err);
                }
            })
            })
    }
    close() {
        this.connection.end();
    }
}

module.exports = Db;
